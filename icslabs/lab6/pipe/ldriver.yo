                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4980a000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61808000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71006000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #Huichuan Hui
                            | #516413990003
                            | 
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #HuichuanHui  516413990003
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 
                            | # You can modify this portion
                            | 
                            |         # Loop header
0x032: 6300                 |         xorq %rax, %rax         # count = 0;
0x034: c0f2f1ffffffffffffff |         iaddq $-15, %rdx        # len > k-1?
0x03e: 765000000000000000   |         jg Loop16               # if len > k-1, goto Loop16:
0x047: 700703000000000000   |         jmp Rest                # if len <= k-1, goto Rest:
                            | 
                            |         # Main loop, k-way loop unrolling, where k = 16
                            | 
0x050: 50a70000000000000000 | Loop16: mrmovq (%rdi), %r10     # read val from src...
0x05a: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
0x064: 62aa                 |         andq %r10, %r10         # val <= 0?
0x066: 717900000000000000   |         jle Np16p1              # if so, goto Np16p1:
0x06f: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x079: 50a70800000000000000 | Np16p1:	mrmovq 8(%rdi), %r10    # read val from src+1...
0x083: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)    # ...and store it to dst+1
0x08d: 62aa                 |         andq %r10, %r10         # val <= 0?
0x08f: 71a200000000000000   |         jle Np16p2              # if so, goto Np16p2:
0x098: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0a2: 50a71000000000000000 | Np16p2:	mrmovq 16(%rdi), %r10    # read val from src+2...
0x0ac: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)    # ...and store it to dst+2
0x0b6: 62aa                 |         andq %r10, %r10         # val <= 0?
0x0b8: 71cb00000000000000   |         jle Np16p3              # if so, goto Np16p3:
0x0c1: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0cb: 50a71800000000000000 | Np16p3:	mrmovq 24(%rdi), %r10   # read val from src+3...
0x0d5: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)   # ...and store it to dst+3
0x0df: 62aa                 |         andq %r10, %r10         # val <= 0?
0x0e1: 71f400000000000000   |         jle Np16p4              # if so, goto Np16p4:
0x0ea: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x0f4: 50a72000000000000000 | Np16p4:	mrmovq 32(%rdi), %r10   # read val from src+4...
0x0fe: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)   # ...and store it to dst+4
0x108: 62aa                 |         andq %r10, %r10         # val <= 0?
0x10a: 711d01000000000000   |         jle Np16p5              # if so, goto Np16p5:
0x113: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x11d: 50a72800000000000000 | Np16p5:	mrmovq 40(%rdi), %r10   # read val from src+5...
0x127: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)   # ...and store it to dst+5
0x131: 62aa                 |         andq %r10, %r10         # val <= 0?
0x133: 714601000000000000   |         jle Np16p6              # if so, goto Np16p6:
0x13c: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x146: 50a73000000000000000 | Np16p6:	mrmovq 48(%rdi), %r10   # read val from src+6...
0x150: 40a63000000000000000 |         rmmovq %r10,48(%rsi)   # ...and store it to dst+6
0x15a: 62aa                 |         andq %r10, %r10         # val <= 0?
0x15c: 716f01000000000000   |         jle Np16p7              # if so, goto Np16p7:
0x165: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x16f: 50a73800000000000000 | Np16p7:	mrmovq 56(%rdi), %r10   # read val from src+7...
0x179: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)   # ...and store it to dst+7
0x183: 62aa                 |         andq %r10, %r10         # val <= 0?
0x185: 719801000000000000   |         jle Np16p8              # if so, goto Np16p8:
0x18e: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x198: 50a74000000000000000 | Np16p8: mrmovq 64(%rdi), %r10   # read val from src+8...
0x1a2: 40a64000000000000000 |         rmmovq %r10, 64(%rsi)   # ...and store it to dst+8
0x1ac: 62aa                 |         andq %r10, %r10         # val <= 0?
0x1ae: 71c101000000000000   |         jle Np16p9              # if so, goto Np16p9:
0x1b7: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x1c1: 50a74800000000000000 | Np16p9:	mrmovq 72(%rdi), %r10   # read val from src+9...
0x1cb: 40a64800000000000000 |         rmmovq %r10, 72(%rsi)   # ...and store it to dst+9
0x1d5: 62aa                 |         andq %r10, %r10         # val <= 0?
0x1d7: 71ea01000000000000   |         jle Np16p10             # if so, goto Np16p10:
0x1e0: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x1ea: 50a75000000000000000 | Np16p10:mrmovq 80(%rdi), %r10   # read val from src+10...
0x1f4: 40a65000000000000000 |         rmmovq %r10, 80(%rsi)   # ...and store it to dst+10
0x1fe: 62aa                 |         andq %r10, %r10         # val <= 0?
0x200: 711302000000000000   |         jle Np16p11             # if so, goto Np16p11:
0x209: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x213: 50a75800000000000000 | Np16p11:mrmovq 88(%rdi), %r10   # read val from src+11...
0x21d: 40a65800000000000000 |         rmmovq %r10, 88(%rsi)   # ...and store it to dst+11
0x227: 62aa                 |         andq %r10, %r10         # val <= 0?
0x229: 713c02000000000000   |         jle Np16p12             # if so, goto Np16p12:
0x232: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x23c: 50a76000000000000000 | Np16p12:mrmovq 96(%rdi), %r10   # read val from src+12...
0x246: 40a66000000000000000 |         rmmovq %r10, 96(%rsi)   # ...and store it to dst+12
0x250: 62aa                 |         andq %r10, %r10         # val <= 0?
0x252: 716502000000000000   |         jle Np16p13             # if so, goto Np16p13:
0x25b: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x265: 50a76800000000000000 | Np16p13:mrmovq 104(%rdi), %r10   # read val from src+13...
0x26f: 40a66800000000000000 |         rmmovq %r10, 104(%rsi)   # ...and store it to dst+13
0x279: 62aa                 |         andq %r10, %r10         # val <= 0?
0x27b: 718e02000000000000   |         jle Np16p14             # if so, goto Np16p14:
0x284: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x28e: 50a77000000000000000 | Np16p14:mrmovq 112(%rdi), %r10   # read val from src+14...
0x298: 40a67000000000000000 |         rmmovq %r10, 112(%rsi)   # ...and store it to dst+14
0x2a2: 62aa                 |         andq %r10, %r10         # val <= 0?
0x2a4: 71b702000000000000   |         jle Np16p15             # if so, goto Np16p15:
0x2ad: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x2b7: 50a77800000000000000 | Np16p15:mrmovq 120(%rdi), %r10   # read val from src+15...
0x2c1: 40a67800000000000000 |         rmmovq %r10, 120(%rsi)   # ...and store it to dst+15
0x2cb: 62aa                 |         andq %r10, %r10         # val <= 0?
0x2cd: 71e002000000000000   |         jle Np16p16             # if so, goto Np16p16:
0x2d6: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x2e0: c0f74000000000000000 | Np16p16:iaddq $64, %rdi         # src+=k
0x2ea: c0f64000000000000000 |         iaddq $64, %rsi         # dst+=k
0x2f4: c0f2f0ffffffffffffff |         iaddq $-16, %rdx        # len-=k, len > k-1?
0x2fe: 765000000000000000   |         jg Loop16               # if so, goto Loop16:
                            | 
0x307: 6022                 | Rest:   addq %rdx, %rdx
0x309: 6022                 |         addq %rdx, %rdx
0x30b: 6022                 |         addq %rdx, %rdx
0x30d: 6022                 |         addq %rdx, %rdx         # %rdx * 8
0x30f: 50a20006000000000000 |         mrmovq Jump(%rdx), %r10 # jump target
0x319: a0af                 |         pushq %r10
0x31b: 90                   |         ret                     # jump
                            | 
0x31c: 50a77000000000000000 | L15:    mrmovq 112(%rdi), %r10   # read val from src+14...
0x326: 40a67000000000000000 |         rmmovq %r10, 112(%rsi)   # ...and store it to dst+14
0x330: 62aa                 |         andq %r10, %r10         # val <= 0?
0x332: 714503000000000000   |         jle L14                 # if so, goto L14:
0x33b: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x345: 50a76800000000000000 | L14:    mrmovq 104(%rdi), %r10   # read val from src+13...
0x34f: 40a66800000000000000 |         rmmovq %r10, 104(%rsi)   # ...and store it to dst+13
0x359: 62aa                 |         andq %r10, %r10         # val <= 0?
0x35b: 716e03000000000000   |         jle L13                 # if so, goto L13:
0x364: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x36e: 50a76000000000000000 | L13:    mrmovq 96(%rdi), %r10   # read val from src12...
0x378: 40a66000000000000000 |         rmmovq %r10, 96(%rsi)   # ...and store it to dst+12
0x382: 62aa                 |         andq %r10, %r10         # val <= 0?
0x384: 719703000000000000   |         jle L12                 # if so, goto L12:
0x38d: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x397: 50a75800000000000000 | L12:    mrmovq 88(%rdi), %r10   # read val from src+11...
0x3a1: 40a65800000000000000 |         rmmovq %r10, 88(%rsi)   # ...and store it to dst+11
0x3ab: 62aa                 |         andq %r10, %r10         # val <= 0?
0x3ad: 71c003000000000000   |         jle L11                 # if so, goto L11:
0x3b6: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x3c0: 50a75000000000000000 | L11:    mrmovq 80(%rdi), %r10   # read val from src+10...
0x3ca: 40a65000000000000000 |         rmmovq %r10, 80(%rsi)   # ...and store it to dst+10
0x3d4: 62aa                 |         andq %r10, %r10         # val <= 0?
0x3d6: 71e903000000000000   |         jle L10                 # if so, goto L10:
0x3df: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x3e9: 50a74800000000000000 | L10:    mrmovq 72(%rdi), %r10   # read val from src+9...
0x3f3: 40a64800000000000000 |         rmmovq %r10, 72(%rsi)   # ...and store it to dst+9
0x3fd: 62aa                 |         andq %r10, %r10         # val <= 0?
0x3ff: 711204000000000000   |         jle L9                  # if so, goto L9:
0x408: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x412: 50a74000000000000000 | L9:     mrmovq 64(%rdi), %r10   # read val from src+8...
0x41c: 40a64000000000000000 |         rmmovq %r10, 64(%rsi)   # ...and store it to dst+8
0x426: 62aa                 |         andq %r10, %r10         # val <= 0?
0x428: 713b04000000000000   |         jle L8                  # if so, goto L8:
0x431: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x43b: 50a73800000000000000 | L8:     mrmovq 56(%rdi), %r10   # read val from src+7...
0x445: 40a63800000000000000 |         rmmovq %r10, 56(%rsi)   # ...and store it to dst+7
0x44f: 62aa                 |         andq %r10, %r10         # val <= 0?
0x451: 716404000000000000   |         jle L7                  # if so, goto L7:
0x45a: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x464: 50a73000000000000000 | L7:     mrmovq 48(%rdi), %r10   # read val from src+6...
0x46e: 40a63000000000000000 |         rmmovq %r10, 48(%rsi)   # ...and store it to dst+6
0x478: 62aa                 |         andq %r10, %r10         # val <= 0?
0x47a: 718d04000000000000   |         jle L6                  # if so, goto L6:
0x483: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x48d: 50a72800000000000000 | L6:     mrmovq 40(%rdi), %r10   # read val from src+5...
0x497: 40a62800000000000000 |         rmmovq %r10, 40(%rsi)   # ...and store it to dst+5
0x4a1: 62aa                 |         andq %r10, %r10         # val <= 0?
0x4a3: 71b604000000000000   |         jle L5                  # if so, goto L5:
0x4ac: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x4b6: 50a72000000000000000 | L5:     mrmovq 32(%rdi), %r10   # read val from src+4...
0x4c0: 40a62000000000000000 |         rmmovq %r10, 32(%rsi)   # ...and store it to dst+4
0x4ca: 62aa                 |         andq %r10, %r10         # val <= 0?
0x4cc: 71df04000000000000   |         jle L4                  # if so, goto L4:
0x4d5: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x4df: 50a71800000000000000 | L4:     mrmovq 24(%rdi), %r10   # read val from src+3...
0x4e9: 40a61800000000000000 |         rmmovq %r10, 24(%rsi)   # ...and store it to dst+3
0x4f3: 62aa                 |         andq %r10, %r10         # val <= 0?
0x4f5: 710805000000000000   |         jle L3                  # if so, goto L3:
0x4fe: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x508: 50a71000000000000000 | L3:     mrmovq 16(%rdi), %r10    # read val from src+2...
0x512: 40a61000000000000000 |         rmmovq %r10, 16(%rsi)    # ...and store it to dst+2
0x51c: 62aa                 |         andq %r10, %r10         # val <= 0?
0x51e: 713105000000000000   |         jle L2                  # if so, goto L2:
0x527: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x531: 50a70800000000000000 | L2:     mrmovq 8(%rdi), %r10    # read val from src+1...
0x53b: 40a60800000000000000 |         rmmovq %r10, 8(%rsi)    # ...and store it to dst+1
0x545: 62aa                 |         andq %r10, %r10         # val <= 0?
0x547: 715a05000000000000   |         jle L1                  # if so, goto L1:
0x550: c0f00100000000000000 |         iaddq $1, %rax          # count++
0x55a: 50a70000000000000000 | L1:     mrmovq (%rdi), %r10     # read val from src...
0x564: 40a60000000000000000 |         rmmovq %r10, (%rsi)     # ...and store it to dst
0x56e: 62aa                 |         andq %r10, %r10         # val <= 0?
0x570: 710806000000000000   |         jle Done                # if so, goto Done:
0x579: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
                            | 
                            |         # Jump table
0x588:                      |         .align 8
0x588: 0806000000000000     |         .quad Done
0x590: 5a05000000000000     |         .quad L1
0x598: 3105000000000000     |         .quad L2
0x5a0: 0805000000000000     |         .quad L3
0x5a8: df04000000000000     |         .quad L4
0x5b0: b604000000000000     |         .quad L5
0x5b8: 8d04000000000000     |         .quad L6
0x5c0: 6404000000000000     |         .quad L7
0x5c8: 3b04000000000000     |         .quad L8
0x5d0: 1204000000000000     |         .quad L9
0x5d8: e903000000000000     |         .quad L10
0x5e0: c003000000000000     |         .quad L11
0x5e8: 9703000000000000     |         .quad L12
0x5f0: 6e03000000000000     |         .quad L13
0x5f8: 4503000000000000     |         .quad L14
0x600: 1c03000000000000     | Jump:   .quad L15       # I put this label at the tail of the jump table, because %rdx ranges in [-15, 0]
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x608:                      | Done:
0x608: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x609:                      | End:
                            | #/* $end ncopy-ys */
0x609:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x610:                      | 	.align 8
0x610:                      | src:
0x610: 0100000000000000     | 	.quad 1
0x618: 0200000000000000     | 	.quad 2
0x620: fdffffffffffffff     | 	.quad -3
0x628: fcffffffffffffff     | 	.quad -4
0x630: fbffffffffffffff     | 	.quad -5
0x638: faffffffffffffff     | 	.quad -6
0x640: f9ffffffffffffff     | 	.quad -7
0x648: 0800000000000000     | 	.quad 8
0x650: f7ffffffffffffff     | 	.quad -9
0x658: 0a00000000000000     | 	.quad 10
0x660: f5ffffffffffffff     | 	.quad -11
0x668: 0c00000000000000     | 	.quad 12
0x670: f3ffffffffffffff     | 	.quad -13
0x678: f2ffffffffffffff     | 	.quad -14
0x680: 0f00000000000000     | 	.quad 15
0x688: 1000000000000000     | 	.quad 16
0x690: 1100000000000000     | 	.quad 17
0x698: eeffffffffffffff     | 	.quad -18
0x6a0: 1300000000000000     | 	.quad 19
0x6a8: 1400000000000000     | 	.quad 20
0x6b0: 1500000000000000     | 	.quad 21
0x6b8: eaffffffffffffff     | 	.quad -22
0x6c0: e9ffffffffffffff     | 	.quad -23
0x6c8: e8ffffffffffffff     | 	.quad -24
0x6d0: 1900000000000000     | 	.quad 25
0x6d8: 1a00000000000000     | 	.quad 26
0x6e0: 1b00000000000000     | 	.quad 27
0x6e8: 1c00000000000000     | 	.quad 28
0x6f0: 1d00000000000000     | 	.quad 29
0x6f8: 1e00000000000000     | 	.quad 30
0x700: e1ffffffffffffff     | 	.quad -31
0x708: 2000000000000000     | 	.quad 32
0x710: 2100000000000000     | 	.quad 33
0x718: deffffffffffffff     | 	.quad -34
0x720: 2300000000000000     | 	.quad 35
0x728: dcffffffffffffff     | 	.quad -36
0x730: dbffffffffffffff     | 	.quad -37
0x738: daffffffffffffff     | 	.quad -38
0x740: d9ffffffffffffff     | 	.quad -39
0x748: 2800000000000000     | 	.quad 40
0x750: d7ffffffffffffff     | 	.quad -41
0x758: 2a00000000000000     | 	.quad 42
0x760: 2b00000000000000     | 	.quad 43
0x768: 2c00000000000000     | 	.quad 44
0x770: 2d00000000000000     | 	.quad 45
0x778: 2e00000000000000     | 	.quad 46
0x780: 2f00000000000000     | 	.quad 47
0x788: 3000000000000000     | 	.quad 48
0x790: cfffffffffffffff     | 	.quad -49
0x798: 3200000000000000     | 	.quad 50
0x7a0: cdffffffffffffff     | 	.quad -51
0x7a8: ccffffffffffffff     | 	.quad -52
0x7b0: 3500000000000000     | 	.quad 53
0x7b8: caffffffffffffff     | 	.quad -54
0x7c0: c9ffffffffffffff     | 	.quad -55
0x7c8: 3800000000000000     | 	.quad 56
0x7d0: c7ffffffffffffff     | 	.quad -57
0x7d8: c6ffffffffffffff     | 	.quad -58
0x7e0: c5ffffffffffffff     | 	.quad -59
0x7e8: c4ffffffffffffff     | 	.quad -60
0x7f0: c3ffffffffffffff     | 	.quad -61
0x7f8: c2ffffffffffffff     | 	.quad -62
0x800: c1ffffffffffffff     | 	.quad -63
0x808: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x810:                      | 	.align 16
0x810:                      | Predest:
0x810: fadebc0000000000     | 	.quad 0xbcdefa
0x818:                      | dest:
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860: abefcd0000000000     | 	.quad 0xcdefab
0x868: abefcd0000000000     | 	.quad 0xcdefab
0x870: abefcd0000000000     | 	.quad 0xcdefab
0x878: abefcd0000000000     | 	.quad 0xcdefab
0x880: abefcd0000000000     | 	.quad 0xcdefab
0x888: abefcd0000000000     | 	.quad 0xcdefab
0x890: abefcd0000000000     | 	.quad 0xcdefab
0x898: abefcd0000000000     | 	.quad 0xcdefab
0x8a0: abefcd0000000000     | 	.quad 0xcdefab
0x8a8: abefcd0000000000     | 	.quad 0xcdefab
0x8b0: abefcd0000000000     | 	.quad 0xcdefab
0x8b8: abefcd0000000000     | 	.quad 0xcdefab
0x8c0: abefcd0000000000     | 	.quad 0xcdefab
0x8c8: abefcd0000000000     | 	.quad 0xcdefab
0x8d0: abefcd0000000000     | 	.quad 0xcdefab
0x8d8: abefcd0000000000     | 	.quad 0xcdefab
0x8e0: abefcd0000000000     | 	.quad 0xcdefab
0x8e8: abefcd0000000000     | 	.quad 0xcdefab
0x8f0: abefcd0000000000     | 	.quad 0xcdefab
0x8f8: abefcd0000000000     | 	.quad 0xcdefab
0x900: abefcd0000000000     | 	.quad 0xcdefab
0x908: abefcd0000000000     | 	.quad 0xcdefab
0x910: abefcd0000000000     | 	.quad 0xcdefab
0x918: abefcd0000000000     | 	.quad 0xcdefab
0x920: abefcd0000000000     | 	.quad 0xcdefab
0x928: abefcd0000000000     | 	.quad 0xcdefab
0x930: abefcd0000000000     | 	.quad 0xcdefab
0x938: abefcd0000000000     | 	.quad 0xcdefab
0x940: abefcd0000000000     | 	.quad 0xcdefab
0x948: abefcd0000000000     | 	.quad 0xcdefab
0x950: abefcd0000000000     | 	.quad 0xcdefab
0x958: abefcd0000000000     | 	.quad 0xcdefab
0x960: abefcd0000000000     | 	.quad 0xcdefab
0x968: abefcd0000000000     | 	.quad 0xcdefab
0x970: abefcd0000000000     | 	.quad 0xcdefab
0x978: abefcd0000000000     | 	.quad 0xcdefab
0x980: abefcd0000000000     | 	.quad 0xcdefab
0x988: abefcd0000000000     | 	.quad 0xcdefab
0x990: abefcd0000000000     | 	.quad 0xcdefab
0x998: abefcd0000000000     | 	.quad 0xcdefab
0x9a0: abefcd0000000000     | 	.quad 0xcdefab
0x9a8: abefcd0000000000     | 	.quad 0xcdefab
0x9b0: abefcd0000000000     | 	.quad 0xcdefab
0x9b8: abefcd0000000000     | 	.quad 0xcdefab
0x9c0: abefcd0000000000     | 	.quad 0xcdefab
0x9c8: abefcd0000000000     | 	.quad 0xcdefab
0x9d0: abefcd0000000000     | 	.quad 0xcdefab
0x9d8: abefcd0000000000     | 	.quad 0xcdefab
0x9e0: abefcd0000000000     | 	.quad 0xcdefab
0x9e8: abefcd0000000000     | 	.quad 0xcdefab
0x9f0: abefcd0000000000     | 	.quad 0xcdefab
0x9f8: abefcd0000000000     | 	.quad 0xcdefab
0xa00: abefcd0000000000     | 	.quad 0xcdefab
0xa08: abefcd0000000000     | 	.quad 0xcdefab
0xa10:                      | Postdest:
0xa10: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0xa18:                      | .align 8
                            | # Run time stack
0xa18: 0000000000000000     | 	.quad 0
0xa20: 0000000000000000     | 	.quad 0
0xa28: 0000000000000000     | 	.quad 0
0xa30: 0000000000000000     | 	.quad 0
0xa38: 0000000000000000     | 	.quad 0
0xa40: 0000000000000000     | 	.quad 0
0xa48: 0000000000000000     | 	.quad 0
0xa50: 0000000000000000     | 	.quad 0
0xa58: 0000000000000000     | 	.quad 0
0xa60: 0000000000000000     | 	.quad 0
0xa68: 0000000000000000     | 	.quad 0
0xa70: 0000000000000000     | 	.quad 0
0xa78: 0000000000000000     | 	.quad 0
0xa80: 0000000000000000     | 	.quad 0
0xa88: 0000000000000000     | 	.quad 0
0xa90: 0000000000000000     | 	.quad 0
                            | 
0xa98:                      | Stack:
