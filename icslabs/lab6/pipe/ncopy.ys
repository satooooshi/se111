#Huichuan Hui
#516413990003


#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#HuichuanHui  516413990003
# Describe how and why you modified the baseline code.
#used iaddq and 8 way loop unrolling, which let
#have 1/8 times iterator
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################


# You can modify this portion

        # Loop header
        xorq %rax, %rax         # count = 0;
        iaddq $-7, %rdx        # len > k-1?
        jg Loop8               # if len > k-1, goto Loop8:
        jmp Rest                # if len <= k-1, goto Rest:

        # Main loop, k-way loop unrolling, where k = 16

Loop8:  mrmovq (%rdi), %r10     # read val from src...
        rmmovq %r10, (%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle Np8p1              # if so, goto Np16p1:
        iaddq $1, %rax          # count++
Np8p1:	mrmovq 8(%rdi), %r10    # read val from src+1...
        rmmovq %r10, 8(%rsi)    # ...and store it to dst+1
        andq %r10, %r10         # val <= 0?
        jle Np8p2              # if so, goto Np16p2:
        iaddq $1, %rax          # count++
Np8p2:	mrmovq 16(%rdi), %r10    # read val from src+2...
        rmmovq %r10, 16(%rsi)    # ...and store it to dst+2
        andq %r10, %r10         # val <= 0?
        jle Np8p3              # if so, goto Np16p3:
        iaddq $1, %rax          # count++
Np8p3:	mrmovq 24(%rdi), %r10   # read val from src+3...
        rmmovq %r10, 24(%rsi)   # ...and store it to dst+3
        andq %r10, %r10         # val <= 0?
        jle Np8p4              # if so, goto Np16p4:
        iaddq $1, %rax          # count++
Np8p4:	mrmovq 32(%rdi), %r10   # read val from src+4...
        rmmovq %r10, 32(%rsi)   # ...and store it to dst+4
        andq %r10, %r10         # val <= 0?
        jle Np8p5              # if so, goto Np16p5:
        iaddq $1, %rax          # count++
Np8p5:	mrmovq 40(%rdi), %r10   # read val from src+5...
        rmmovq %r10, 40(%rsi)   # ...and store it to dst+5
        andq %r10, %r10         # val <= 0?
        jle Np8p6               # if so, goto Np16p6:
        iaddq $1, %rax          # count++
Np8p6:	mrmovq 48(%rdi), %r10   # read val from src+6...
        rmmovq %r10,48(%rsi)    # ...and store it to dst+6
        andq %r10, %r10         # val <= 0?
        jle Np8p7               # if so, goto Np16p7:
        iaddq $1, %rax          # count++
Np8p7:	mrmovq 56(%rdi), %r10   # read val from src+7...
        rmmovq %r10, 56(%rsi)   # ...and store it to dst+7
        andq %r10, %r10         # val <= 0?
        jle Np8p8               # if so, goto Np16p8:
        iaddq $1, %rax          # count++
Np8p8:  iaddq $64, %rdi         # src+=k(8)
        iaddq $64, %rsi         # dst+=k(8)
        iaddq $-8, %rdx         # len-=k, len > k-1?
        jg Loop8                # if so, goto Loop16:

Rest:   addq %rdx, %rdx
        addq %rdx, %rdx
        addq %rdx, %rdx         # %rdx * 8
        mrmovq Jump(%rdx), %r10 # jump target
        pushq %r10
        ret                     # jump


L7:     mrmovq 48(%rdi), %r10   # read val from src+6...
        rmmovq %r10, 48(%rsi)   # ...and store it to dst+6
        andq %r10, %r10         # val <= 0?
        jle L6                  # if so, goto L6:
        iaddq $1, %rax          # count++
L6:     mrmovq 40(%rdi), %r10   # read val from src+5...
        rmmovq %r10, 40(%rsi)   # ...and store it to dst+5
        andq %r10, %r10         # val <= 0?
        jle L5                  # if so, goto L5:
        iaddq $1, %rax          # count++
L5:     mrmovq 32(%rdi), %r10   # read val from src+4...
        rmmovq %r10, 32(%rsi)   # ...and store it to dst+4
        andq %r10, %r10         # val <= 0?
        jle L4                  # if so, goto L4:
        iaddq $1, %rax          # count++
L4:     mrmovq 24(%rdi), %r10   # read val from src+3...
        rmmovq %r10, 24(%rsi)   # ...and store it to dst+3
        andq %r10, %r10         # val <= 0?
        jle L3                  # if so, goto L3:
        iaddq $1, %rax          # count++
L3:     mrmovq 16(%rdi), %r10    # read val from src+2...
        rmmovq %r10, 16(%rsi)    # ...and store it to dst+2
        andq %r10, %r10         # val <= 0?
        jle L2                  # if so, goto L2:
        iaddq $1, %rax          # count++
L2:     mrmovq 8(%rdi), %r10    # read val from src+1...
        rmmovq %r10, 8(%rsi)    # ...and store it to dst+1
        andq %r10, %r10         # val <= 0?
        jle L1                  # if so, goto L1:
        iaddq $1, %rax          # count++
L1:     mrmovq (%rdi), %r10     # read val from src...
        rmmovq %r10, (%rsi)     # ...and store it to dst
        andq %r10, %r10         # val <= 0?
        jle Done                # if so, goto Done:
        iaddq $1, %rax          # count++
        jmp Done


        # Jump table
        .align 8
        .quad Done
        .quad L1
        .quad L2
        .quad L3
        .quad L4
        .quad L5
        .quad L6
Jump:   .quad L7      # I put this label at the tail of the jump table, because %rdx ranges in [-15, 0]


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
